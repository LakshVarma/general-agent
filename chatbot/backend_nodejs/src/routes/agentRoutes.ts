import { Router, Request, Response } from 'express';
import { v4 as uuidv4 } from 'uuid'; // Import uuid
import { AgentService } from '../services/AgentService';
import { ITask, IExecutionResult } from '../interfaces'; // Import ITask

const router = Router();
const agentService = new AgentService();

// The request body is expected to provide 'type' and 'params' for the task.
// The 'id' will be generated by the server.
interface TaskRequestBody {
  type: string;
  params: any;
}

router.post('/execute', async (req: Request, res: Response) => {
  const requestBody = req.body as TaskRequestBody;

  if (!requestBody || typeof requestBody.type !== 'string' || requestBody.params === undefined) {
    return res.status(400).json({ 
      success: false, 
      error: 'Malformed task object in request body. Must include "type" (string) and "params" (any).' 
    });
  }

  // Construct the ITask object with a server-generated ID
  const task: ITask = {
    id: uuidv4(), // Generate unique ID
    type: requestBody.type,
    params: requestBody.params
  };

  try {
    console.log(`Agent route /execute received task (ID: ${task.id}):`, task);
    const result: IExecutionResult = await agentService.executeTask(task);
    
    if (result.success) {
      return res.status(200).json(result);
    } else {
      // Use a more specific error code if the service indicates a client-side type error vs. server-side
      // For now, 400 for any service-reported failure that's not an unexpected exception.
      return res.status(400).json(result); 
    }
  } catch (error) {
    console.error(`Error in /agent/execute route (Task ID: ${task.id}):`, error);
    const errorMessage = error instanceof Error ? error.message : 'An unexpected server error occurred.';
    return res.status(500).json({ 
      success: false, 
      error: errorMessage,
      details: `Task ID: ${task.id}` // Include Task ID in error response for traceability
    });
  }
});

export default router;
